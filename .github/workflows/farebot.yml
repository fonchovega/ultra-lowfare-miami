// ======================================================================
// scripts/sync_all.js
// Sincroniza hist√≥rico (data.json -> data/historico.json) y
// genera contexto v1.2 (data/historico_contextual_v1.2.json)
// ======================================================================

import fs from "fs";
import path from "path";
import { execSync } from "child_process";
import { fileURLToPath } from "url";

// ---------------------------------------------------------------
// Utilidades internas (aut√≥nomas, sin dependencias externas)
// ---------------------------------------------------------------
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

function log(msg, level = "INFO") {
  const stamp = new Date().toISOString();
  const tag = level.padEnd(5, " ");
  console.log(`[${stamp}] [${tag}] ${msg}`);
}

function ensureDir(p) {
  if (!fs.existsSync(p)) fs.mkdirSync(p, { recursive: true });
}

function readJsonSafe(filePath, fallback) {
  try {
    if (!fs.existsSync(filePath)) return fallback;
    const raw = fs.readFileSync(filePath, "utf8");
    if (!raw.trim()) return fallback;
    return JSON.parse(raw);
  } catch {
    return fallback;
  }
}

function writeJsonAtomic(filePath, data) {
  const dir = path.dirname(filePath);
  ensureDir(dir);
  const tmp = `${filePath}.tmp`;
  fs.writeFileSync(tmp, JSON.stringify(data, null, 2), "utf8");
  fs.renameSync(tmp, filePath);
}

const nowIsoUtc = () => new Date().toISOString();

// ---------------------------------------------------------------
// Rutas base (relativas al repo)
// ---------------------------------------------------------------
const DATA_PATH    = path.resolve(__dirname, "..", "data.json");
const HIST_PATH    = path.resolve(__dirname, "..", "data", "historico.json");
const CONTEXT_PATH = path.resolve(__dirname, "..", "data", "historico_contextual_v1.2.json");
const CFG_PATH     = path.resolve(__dirname, "..", "config.json");

// ---------------------------------------------------------------
// 1) Actualizar hist√≥rico
// ---------------------------------------------------------------
function updateHistorico() {
  log("üìò Actualizando hist√≥rico...");
  const data = readJsonSafe(DATA_PATH, null);
  if (!data) {
    log("‚ö†Ô∏è  No hay data.json, se omite la actualizaci√≥n del hist√≥rico.", "WARN");
    return 0;
  }

  const historico = readJsonSafe(HIST_PATH, []);
  const yaExiste = historico.some((i) => i?.meta?.generado === data?.meta?.generado);

  if (!yaExiste) {
    historico.push(data);
    writeJsonAtomic(HIST_PATH, historico);
    log(`‚úÖ Hist√≥rico actualizado (${historico.length} snapshots).`);
  } else {
    log("‚ÑπÔ∏è  Registro ya existente. No se agreg√≥.");
  }
  return historico.length;
}

// ---------------------------------------------------------------
// 2) Generar contexto v1.2
// ---------------------------------------------------------------
function generateContext(snapCount) {
  log("üß≠ Generando contexto v1.2...");

  const REPO = "fonchovega/ultra-lowfare-miami";
  const cfg = readJsonSafe(CFG_PATH, null);

  let head = "n/a";
  try {
    head = execSync("git rev-parse HEAD", { encoding: "utf8" }).trim();
  } catch {
    // ok, puede estar corriendo fuera de git
  }

  const payload = {
    meta: {
      tipo: "contextual",
      version_contexto: "v1.2",
      fuente: "ChatGPT_sync + GitHub Actions API",
      fecha_sync: nowIsoUtc(),
      repo: REPO,
      commit: head
    },
    resumen: {
      snapshots_en_historico_json: snapCount,
      ultimo_dedupe: { ejecutado: true, registros_unicos: snapCount },
      config: cfg
    },
    artefactos: {
      archivos_clave: [
        "scripts/farebot.js",
        "scripts/historico.js",
        "scripts/rebuild_historico_from_git.js",
        "scripts/dedupe.js",
        "scripts/guard_run.js",
        ".github/workflows/farebot.yml",
        "data/historico.json"
      ]
    },
    bitacora_tecnica: [
      "v1.1: hist√≥rico en /data",
      "v1.2: guard_run + dedupe + l√≠mites",
      "v1.3.1: helpers consolidados y referencias corregidas"
    ]
  };

  writeJsonAtomic(CONTEXT_PATH, payload);
  log(`‚úÖ Contexto v1.2 generado en ${CONTEXT_PATH}`);
}

// ---------------------------------------------------------------
// Ejecutar
// ---------------------------------------------------------------
log("üöÄ Iniciando sincronizaci√≥n total...");
const totalSnapshots = updateHistorico();
generateContext(totalSnapshots);
log("üéØ Sincronizaci√≥n finalizada correctamente.");
